/**
 */
package org.xilaew.atg.model.activityTestCaseGraph.provider;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.edit.command.CommandParameter;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.xilaew.atg.model.abstractTestCaseGraph.AbstractTCGContainer;
import org.xilaew.atg.model.abstractTestCaseGraph.AbstractTestCaseGraphPackage;

import org.xilaew.atg.model.abstractTestCaseGraph.util.AbstractTestCaseGraphSwitch;

import org.xilaew.atg.model.activityTestCaseGraph.ActivityTestCaseGraphFactory;
import org.xilaew.atg.model.activityTestCaseGraph.ActivityTestCaseGraphPackage;

import org.xilaew.atg.model.activityTestCaseGraph.util.ActivityTestCaseGraphAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ActivityTestCaseGraphItemProviderAdapterFactory extends ActivityTestCaseGraphAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(ActivityTestCaseGraphEditPlugin.INSTANCE, ActivityTestCaseGraphPackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ActivityTestCaseGraphItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xilaew.atg.model.activityTestCaseGraph.TCGActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCGActivityItemProvider tcgActivityItemProvider;

	/**
	 * This creates an adapter for a {@link org.xilaew.atg.model.activityTestCaseGraph.TCGActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCGActivityAdapter() {
		if (tcgActivityItemProvider == null) {
			tcgActivityItemProvider = new TCGActivityItemProvider(this);
		}

		return tcgActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xilaew.atg.model.activityTestCaseGraph.TCGAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCGActionItemProvider tcgActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.xilaew.atg.model.activityTestCaseGraph.TCGAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCGActionAdapter() {
		if (tcgActionItemProvider == null) {
			tcgActionItemProvider = new TCGActionItemProvider(this);
		}

		return tcgActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xilaew.atg.model.activityTestCaseGraph.TCGControlFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCGControlFlowItemProvider tcgControlFlowItemProvider;

	/**
	 * This creates an adapter for a {@link org.xilaew.atg.model.activityTestCaseGraph.TCGControlFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCGControlFlowAdapter() {
		if (tcgControlFlowItemProvider == null) {
			tcgControlFlowItemProvider = new TCGControlFlowItemProvider(this);
		}

		return tcgControlFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xilaew.atg.model.activityTestCaseGraph.TCGControlNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCGControlNodeItemProvider tcgControlNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.xilaew.atg.model.activityTestCaseGraph.TCGControlNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCGControlNodeAdapter() {
		if (tcgControlNodeItemProvider == null) {
			tcgControlNodeItemProvider = new TCGControlNodeItemProvider(this);
		}

		return tcgControlNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xilaew.atg.model.activityTestCaseGraph.TCGStructuredActivityNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCGStructuredActivityNodeItemProvider tcgStructuredActivityNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.xilaew.atg.model.activityTestCaseGraph.TCGStructuredActivityNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCGStructuredActivityNodeAdapter() {
		if (tcgStructuredActivityNodeItemProvider == null) {
			tcgStructuredActivityNodeItemProvider = new TCGStructuredActivityNodeItemProvider(this);
		}

		return tcgStructuredActivityNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xilaew.atg.model.activityTestCaseGraph.TCGVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCGVariableItemProvider tcgVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.xilaew.atg.model.activityTestCaseGraph.TCGVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCGVariableAdapter() {
		if (tcgVariableItemProvider == null) {
			tcgVariableItemProvider = new TCGVariableItemProvider(this);
		}

		return tcgVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xilaew.atg.model.activityTestCaseGraph.TCGObjectVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCGObjectVariableItemProvider tcgObjectVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.xilaew.atg.model.activityTestCaseGraph.TCGObjectVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCGObjectVariableAdapter() {
		if (tcgObjectVariableItemProvider == null) {
			tcgObjectVariableItemProvider = new TCGObjectVariableItemProvider(this);
		}

		return tcgObjectVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xilaew.atg.model.activityTestCaseGraph.TCGBasicVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCGBasicVariableItemProvider tcgBasicVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.xilaew.atg.model.activityTestCaseGraph.TCGBasicVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCGBasicVariableAdapter() {
		if (tcgBasicVariableItemProvider == null) {
			tcgBasicVariableItemProvider = new TCGBasicVariableItemProvider(this);
		}

		return tcgBasicVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xilaew.atg.model.activityTestCaseGraph.TCGOCLExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCGOCLExpressionItemProvider tcgoclExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.xilaew.atg.model.activityTestCaseGraph.TCGOCLExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCGOCLExpressionAdapter() {
		if (tcgoclExpressionItemProvider == null) {
			tcgoclExpressionItemProvider = new TCGOCLExpressionItemProvider(this);
		}

		return tcgoclExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xilaew.atg.model.activityTestCaseGraph.TCGOCLOperationCallExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCGOCLOperationCallExpItemProvider tcgoclOperationCallExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.xilaew.atg.model.activityTestCaseGraph.TCGOCLOperationCallExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCGOCLOperationCallExpAdapter() {
		if (tcgoclOperationCallExpItemProvider == null) {
			tcgoclOperationCallExpItemProvider = new TCGOCLOperationCallExpItemProvider(this);
		}

		return tcgoclOperationCallExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xilaew.atg.model.activityTestCaseGraph.TCGOCLVariableCallExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCGOCLVariableCallExpItemProvider tcgoclVariableCallExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.xilaew.atg.model.activityTestCaseGraph.TCGOCLVariableCallExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCGOCLVariableCallExpAdapter() {
		if (tcgoclVariableCallExpItemProvider == null) {
			tcgoclVariableCallExpItemProvider = new TCGOCLVariableCallExpItemProvider(this);
		}

		return tcgoclVariableCallExpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xilaew.atg.model.activityTestCaseGraph.TCGOCLLiteralExp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCGOCLLiteralExpItemProvider tcgoclLiteralExpItemProvider;

	/**
	 * This creates an adapter for a {@link org.xilaew.atg.model.activityTestCaseGraph.TCGOCLLiteralExp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCGOCLLiteralExpAdapter() {
		if (tcgoclLiteralExpItemProvider == null) {
			tcgoclLiteralExpItemProvider = new TCGOCLLiteralExpItemProvider(this);
		}

		return tcgoclLiteralExpItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders() {
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceLocator getResourceLocator() {
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (tcgActivityItemProvider != null) tcgActivityItemProvider.dispose();
		if (tcgActionItemProvider != null) tcgActionItemProvider.dispose();
		if (tcgControlFlowItemProvider != null) tcgControlFlowItemProvider.dispose();
		if (tcgControlNodeItemProvider != null) tcgControlNodeItemProvider.dispose();
		if (tcgStructuredActivityNodeItemProvider != null) tcgStructuredActivityNodeItemProvider.dispose();
		if (tcgVariableItemProvider != null) tcgVariableItemProvider.dispose();
		if (tcgObjectVariableItemProvider != null) tcgObjectVariableItemProvider.dispose();
		if (tcgBasicVariableItemProvider != null) tcgBasicVariableItemProvider.dispose();
		if (tcgoclExpressionItemProvider != null) tcgoclExpressionItemProvider.dispose();
		if (tcgoclOperationCallExpItemProvider != null) tcgoclOperationCallExpItemProvider.dispose();
		if (tcgoclVariableCallExpItemProvider != null) tcgoclVariableCallExpItemProvider.dispose();
		if (tcgoclLiteralExpItemProvider != null) tcgoclLiteralExpItemProvider.dispose();
	}

	/**
	 * A child creation extender for the {@link AbstractTestCaseGraphPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class AbstractTestCaseGraphChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends AbstractTestCaseGraphSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseAbstractTCGContainer(AbstractTCGContainer object) {
				newChildDescriptors.add
					(createChildParameter
						(AbstractTestCaseGraphPackage.Literals.ABSTRACT_TCG_CONTAINER__NODES,
						 ActivityTestCaseGraphFactory.eINSTANCE.createTCGAction()));

				newChildDescriptors.add
					(createChildParameter
						(AbstractTestCaseGraphPackage.Literals.ABSTRACT_TCG_CONTAINER__NODES,
						 ActivityTestCaseGraphFactory.eINSTANCE.createTCGControlNode()));

				newChildDescriptors.add
					(createChildParameter
						(AbstractTestCaseGraphPackage.Literals.ABSTRACT_TCG_CONTAINER__NODES,
						 ActivityTestCaseGraphFactory.eINSTANCE.createTCGStructuredActivityNode()));

				newChildDescriptors.add
					(createChildParameter
						(AbstractTestCaseGraphPackage.Literals.ABSTRACT_TCG_CONTAINER__EDGES,
						 ActivityTestCaseGraphFactory.eINSTANCE.createTCGControlFlow()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
			new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
			return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return ActivityTestCaseGraphEditPlugin.INSTANCE;
		}
	}

}
